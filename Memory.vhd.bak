-- Memory with Read/Write
library work;
use work.all;
library ieee;
use ieee.std_logic_1164.all;

use ieee.numeric_std.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity Memory is
	port (
		clk, write_enable  : in std_logic;
		addr, data_write : in std_logic_vector(15 downto 0);
		data_read        : out std_logic_vector(15 downto 0)
	);
end entity;

architecture arch of Memory is

	type MemoryArray is array(63 downto 0) of std_logic_vector(15 downto 0);
	signal memory : MemoryArray := (
		0 => x"3401", -- LHI R2 1
		1 => x"04e0", -- ADD R2 R3 R4
		2 => x"00e2", -- ADC R0 R3 R4
		3 => x"20e2", -- NDC R0 R3 R4
		4 => x"00e0", -- ADD R0 R3 R4
		5 => x"00e1", -- ADZ R0 R3 R4
		others => x"0000"
	);

begin

	data_read <= memory(to_integer(unsigned(addr)));

	proc_write : process (write_enable, data_write, addr, clk)
	begin
		if (write_enable = '1') then
			if (rising_edge(clk)) then
				memory(to_integer(unsigned(addr))) <= data_write;
			end if;
		end if;

	end process;

end architecture;
